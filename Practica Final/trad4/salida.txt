(setq x 0)  
(setq y 0)  
(defun swap (a  b ) 
	(return-from swap (values b  a ))

)
(defun funcion0 () 
	(print "funcion0") 
	(print (funcion0))  
	(return-from funcion0 (values (+ 1 1) ))

)
(defun funcion1 (y ) 
	(print "funcion1") 
	(print (funcion1 (+ 7 2) ))  

)
(defun funcion2 (a  b  x ) 
	(print "funcion2") 
	(return-from funcion2 (values (+ 1 1) ))
	(print (funcion2 a  (+ b x)  (* 3 2) ))  
	(return-from funcion2 (values (+ 1 1) ))
	(print (funcion2 a  (+ b x)  (* 3 2) ))  
	(return-from funcion2 (values (+ 1 1) ))
	(print (funcion2 a  (+ b x)  (* 3 2) ))  
	(return-from funcion2 (values (+ 1 1) ))
	(print (funcion2 a  (+ b x)  (* 3 2) ))  

)
(defun main ()
	(setq a 0)  
	(setq a 1) 
	(setq b 2) 
	(setq c 3)  (setq d 0)  (setq e 0)  (setq f 4)  
	(print "step1") 
	(print a) (print (+ b c))  
	(print (or 1 (And 1 (/= (= 0 1) (<= (>= (> (< 1 1) 1) 1) (- (+ 1 1) (* (/ 1 1) 1)))))))  
	(loop while (= a 1) do 
	(setq f 2)  (setq g 0)  (setq h 0)  (setq i 5)  
	(print "while 1") 
	(print a) (print (+ b c))  
	(loop while (= a 1) do 
	(setq f 2)  (setq g 0)  (setq h 0)  (setq i 5)  
	(print "while 2") 
	(print a) (print (+ b c))  
	(setq a 3) 
	) 
	) 
	(if ( /= 0 (- a 1)) 
	(progn 
	(print "if 1") 
)	) 
	(if (= (mod a 1) 0) 
	(progn 
	(print "if 1") 
)	) 
	(if (= a 1) 
	(progn 
	(loop while ( /= 0 (- a b)) do 
	(print "if 2") 
	) 
)	(progn 
	(print "else 1") 
)	) 
	(setq b 0)  
	(setq ii 0) 
	(loop while (> ii 10) do 
	(print "for 1") 
	(setq ii (+ (+ (+ ii 1) 2) b)))
	(setq a (make-array 1))  
	(setq a (make-array 1))  (setq b (make-array 1))  
	(setq a (make-array 1))  (setq b (make-array (+ 1 1)))  (setq c 0)  
	(print (+ (aref a 5) 1))  
	(setf (aref a 2345) 1)  
	(setf (aref a (+ 1 2345)) (+ 1 (aref a 1)))  
) 
(main)
